openapi: 3.0.0
info:
  version: 0.1.0
  title: オンライン展示会
  description: オンライン展示会 サーバサイドAPI定義
  # NOTE(ryutah): LICENSEどうする？
  # license:
  #   name: MIT
servers:
  - url: /api

x-constnt:
  maxLength:
    short_string: &max_len_short_string 100
    long_string: &max_len_long_string 1000
    url: &max_len_url 2000
  default:
    page_size: &default_page_size 50
  maximum:
    page_size: &max_page_size 100
  response:
    paging_fields: &response_paging_fields
      total_count:
        type: integer
        description: 総作家数
        format: int32
        example: 100
      next_page_token:
        type: string
        description: 次ページ取得のためのトークン
        example: xxxxxxxxxxxxx

paths:
  /artists:
    get:
      summary: 作家一覧
      operationId: listArtist
      tags:
        - artists
      parameters:
        - in: query
          name: page_token
          description: |
            ページトークンを指定する

            一覧を取得する際に、レスポンスの `next_page_token` の値を設定してリクエストを送信することで
            次のページの一覧を取得することができる
          required: false
          schema:
            type: string
        - in: query
          name: page_size
          description: 一度のリクエストで取得するリストの数を指定する
          schema:
            type: integer
            format: int32
            default: *default_page_size
            maximum: *max_page_size
      responses:
        "200":
          $ref: "#/components/responses/ListArtist"
  /artists/{artist_id}:
    get:
      summary: 作家詳細情報取得
      operationId: getArtist
      tags:
        - artists
      parameters:
        - in: path
          required: true
          name: artist_id
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/GetArtist"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/ServerError"

  /artists/{artist_id}/artofworks:
    get:
      summary: 作品一覧取得
      operationId: listArtOfWork
      tags:
        - art_of_works
      parameters:
        - in: path
          required: true
          name: artist_id
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ListArtOfWork"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/ServerError"

components:
  responses:
    ListArtist:
      description: 作家一覧
      content:
        application/json:
          schema:
            type: object
            properties:
              artists:
                type: array
                items:
                  $ref: "#/components/schemas/Artist"
              <<: *response_paging_fields
    GetArtist:
      description: artist_idで指定された作家の情報
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Artist"
    ListArtOfWork:
      description: 作品一覧
      content:
        application/json:
          schema:
            type: object
            properties:
              art_of_works:
                type: array
                items:
                  $ref: "#/components/schemas/ArtOfWork"
              <<: *response_paging_fields
    NotFoundError:
      description: |
        NotFoundエラー

        パスで指定されているリソースが存在しない場合
        検索結果が0件である場合等では404エラーは発生しない
        (その場合は、空のリストが成功レスポンスで返される)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    ServerError:
      description: |
        サーバーエラー

        予期せぬエラーが発生した場合
        エラー詳細には、内部的なエラーメッセージが含まれる可能性があるため、
        画面上に表示するには適さない
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  schemas:
    Artist:
      type: object
      properties:
        id:
          type: string
          description: 作家ID
        profile:
          $ref: "#/components/schemas/ArtistProfile"
        masterpiece:
          $ref: "#/components/schemas/ArtistMasterpiece"
        links:
          nullable: false
          type: array
          items:
            $ref: "#/components/schemas/ArtistLink"
      required:
        - id
        - profile
        - masterpiece

    ArtistProfile:
      type: object
      description: 作家情報
      properties:
        avator:
          type: string
          description: アバターのURL
          maxLength: *max_len_url
          format: url
          example: "https://github.com/ryutah.png"
        name:
          type: string
          description: 作家名
          maxLength: *max_len_short_string
          example: ryutah
        introduction:
          type: string
          description: 作家紹介
          maxLength: *max_len_long_string
          example: |
            僕はすごい作家なので、ぶっちゃけこんなサイト使わなくてもどうとでもなるのです😊
            試しに使ってみようかなって程度なのです。
      required:
        - name
        - introduction

    ArtistMasterpiece:
      type: object
      description: 代表作
      properties:
        title:
          type: string
          description: 作品タイトル
          maxLength: *max_len_short_string
          example: ほげほげふがふが
        url:
          type: string
          description: |
            作品の画像URL
            解像度: 150x150(適当)
          maxLength: *max_len_url
          example: "https://placehold.jp/150x150.png"
      required:
        - title
        - url

    ArtistLink:
      type: object
      description: リンク情報
      properties:
        url:
          type: string
          description: URL
          maxLength: *max_len_url
          format: url
          example: "https://github.com/ryutah"
        display_name:
          type: string
          description: 表示名
          maxLength: *max_len_short_string
          example: "@ryutah"
        icon:
          type: string
          description: サービスアイコンのURL
          maxLength: *max_len_long_string
          format: url
          example: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
      required:
        - url
        - display_name

    ArtOfWork:
      type: object
      description: 作品
      properties:
        id:
          type: string
          description: 作品ID
          example: "xxxxxxxxxxxx"
        information:
          $ref: "#/components/schemas/ArtOfWorkInformation"
        display_items:
          $ref: "#/components/schemas/ArtOfWOrkDisplayItem"
      required:
        - information
        - display_items

    ArtOfWorkInformation:
      type: object
      description: 作品詳細情報
      properties:
        title:
          type: string
          description: 作品タイトル
          maxLength: *max_len_short_string
          example: 現場猫
        introduction:
          type: string
          description: 作品の紹介文
          maxLength: *max_len_long_string
          example: |
            現場猫とは、様々な現場ではたらく猫たちである。便宜上、そのもとになった「電話猫」、そして現場猫をもとにして作られた「仕事猫」についてもここで述べる。
            現場猫の元となった画像は、くまみね氏が2016年2015年(2020/08/13訂正)にツイートした「ネコ電話相談室」が初出。猫が受話器を取り、「どうして夜中に起きてるんですか？」と言っている画像である。
      required:
        - title
        - introduction

    ArtOfWOrkDisplayItem:
      type: object
      description: 作品
      properties:
        url:
          type: string
          description: 作品のURL
          format: url
          example: "https://user-images.githubusercontent.com/6662577/93331845-e2435f80-f85b-11ea-9a1e-3c3d591e4504.png"
          maxLength: *max_len_url
        mime_type:
          type: string
          description: 作品の形式
          enum:
            - image/png
            - video/mp4

    # エラーメッセージの参考:
    # https://developers.google.com/search-ads/v2/standard-error-responses
    Error:
      type: object
      properties:
        message:
          type: string
          description: >
            エラーメッセージ概要
            画面上にエラーを表示することが想定されている
        code:
          type: integer
          format: int32
          description: HTTPステータスコード
          enum: [404, 500]
        errors:
          type: array
          description: エラーリスト
          items:
            $ref: "#/components/schemas/ErrorDetail"
      required:
        - message
        - code
        - errors

    ErrorDetail:
      type: object
      properties:
        reason:
          type: string
          description: エラー種別
          enum:
            - inernal_error
            - not_found
        message:
          description: >
            エラーの詳細内容
            画面上に表示される形式で有ることは保証されない
          type: string
      required:
        - reason
        - message
